name: Flask App CI/CD

on:
  push:
    branches: [ main, staging ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

env:
  PYTHON_VERSION: '3.9'
  FLASK_ENV: 'production'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
        
    - name: Run tests
      run: |
        pytest -v test_app.py --cov=./ --cov-report=xml
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  deploy-staging:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/staging'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        
    - name: Deploy to Staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: rsync, SSH, or cloud provider CLI commands
        echo "STAGING_DEPLOYMENT=true" >> $GITHUB_ENV
        
    - name: Health Check Staging
      run: |
        echo "Performing health check on staging..."
        # Add actual health check command
        echo "Health check completed"

  deploy-production:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'release' && github.event.action == 'published'
    
    environment:
      name: production
      url: https://your-production-url.com
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        
    - name: Deploy to Production
      env:
        DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
        SERVER_IP: ${{ secrets.PRODUCTION_SERVER_IP }}
        USERNAME: ${{ secrets.SERVER_USERNAME }}
      run: |
        echo "Deploying to production..."
        # Example deployment using SSH
        # mkdir -p ~/.ssh
        # echo "$DEPLOY_KEY" > ~/.ssh/id_rsa
        # chmod 600 ~/.ssh/id_rsa
        # ssh $USERNAME@$SERVER_IP 'deploy-script.sh'
        echo "PRODUCTION_DEPLOYMENT=true" >> $GITHUB_ENV
        
    - name: Health Check Production
      run: |
        echo "Performing health check on production..."
        # Add actual health check command
        echo "Production deployment completed successfully"
